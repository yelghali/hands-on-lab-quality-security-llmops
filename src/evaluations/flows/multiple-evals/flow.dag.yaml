environment:
  python_requirements_txt: requirements.txt
environment_variables:
  PF_WORKER_COUNT: 2
inputs:
  question:
    type: string
    default: ""
    is_chat_input: false
  answer:
    type: string
    default: ""
    is_chat_input: false
  context:
    type: string
    default: ""
    is_chat_input: false
  ground_truth:
    type: string
    default: ""
    is_chat_input: false
  metrics:
    type: string
    default: gpt_groundedness,f1_score,gpt_fluency,gpt_coherence,gpt_similarity,gpt_relevance,violence,self_harm
    is_chat_input: false
  threshold:
    type: int
    default: 4
    is_chat_input: false
  groundedness_service_flight:
    type: string
    default: "true"
    is_chat_input: false
  deployment_name:
    type: string
    default: gpt-4
    is_chat_input: false
outputs:
  gpt_coherence:
    type: string
    reference: ${concat_scores.output.gpt_coherence}
    evaluation_only: false
    is_chat_output: false
  gpt_relevance:
    type: string
    reference: ${concat_scores.output.gpt_relevance}
    evaluation_only: false
    is_chat_output: false
  self_harm:
    type: string
    reference: ${concat_scores.output.self_harm}
    evaluation_only: false
    is_chat_output: false
  violence_reason:
    type: string
    reference: ${concat_scores.output.violence_reason}
    evaluation_only: false
    is_chat_output: false
  sexual_reason:
    type: string
    reference: ${concat_scores.output.sexual_reason}
    evaluation_only: false
    is_chat_output: false
  hate_unfairness:
    type: string
    reference: ${concat_scores.output.hate_unfairness}
    evaluation_only: false
    is_chat_output: false
  sexual_score:
    type: string
    reference: ${concat_scores.output.sexual_score}
    evaluation_only: false
    is_chat_output: false
  violence_score:
    type: string
    reference: ${concat_scores.output.violence_score}
    evaluation_only: false
    is_chat_output: false
  gpt_groundedness:
    type: string
    reference: ${concat_scores.output.gpt_groundedness}
    evaluation_only: false
    is_chat_output: false
  gpt_groundedness_reason:
    type: string
    reference: ${concat_scores.output.gpt_groundedness_reason}
    evaluation_only: false
    is_chat_output: false
  gpt_similarity:
    type: string
    reference: ${concat_scores.output.gpt_similarity}
    evaluation_only: false
    is_chat_output: false
  gpt_fluency:
    type: string
    reference: ${concat_scores.output.gpt_fluency}
    evaluation_only: false
    is_chat_output: false
  sexual:
    type: string
    reference: ${concat_scores.output.sexual}
    evaluation_only: false
    is_chat_output: false
  self_harm_score:
    type: string
    reference: ${concat_scores.output.self_harm_score}
    evaluation_only: false
    is_chat_output: false
  hate_unfairness_reason:
    type: string
    reference: ${concat_scores.output.hate_unfairness_reason}
    evaluation_only: false
    is_chat_output: false
  violence:
    type: string
    reference: ${concat_scores.output.violence}
    evaluation_only: false
    is_chat_output: false
  hate_unfairness_score:
    type: string
    reference: ${concat_scores.output.hate_unfairness_score}
    evaluation_only: false
    is_chat_output: false
  self_harm_reason:
    type: string
    reference: ${concat_scores.output.self_harm_reason}
    evaluation_only: false
    is_chat_output: false
  f1_score:
    type: string
    reference: ${concat_scores.output.f1_score}
    evaluation_only: false
    is_chat_output: false
nodes:
- name: concat_quality_scores
  type: python
  source:
    type: code
    path: concat_quality_scores.py
  inputs:
    f1_score: ${f1_score.output}
    gpt_scores: ${evaluate_gpt_metrics.output}
  aggregation: false
- name: f1_score
  type: python
  source:
    type: code
    path: f1_score.py
  inputs:
    answer: ${inputs.answer}
    ground_truth: ${inputs.ground_truth}
  activate:
    when: ${validate_input.output.f1_score}
    is: true
  aggregation: false
- name: aggregate_variants_results
  type: python
  source:
    type: code
    path: aggregate_variants_results.py
  inputs:
    results: ${concat_scores.output}
    selected_metrics: ${select_metrics.output}
    thresholds: ${inputs.threshold}
  aggregation: true
- name: select_metrics
  type: python
  source:
    type: code
    path: select_metrics.py
  inputs:
    metrics: ${inputs.metrics}
  aggregation: false
- name: validate_input
  type: python
  source:
    type: code
    path: validate_input.py
  inputs:
    answer: ${inputs.answer}
    context: ${inputs.context}
    ground_truth: ${inputs.ground_truth}
    question: ${inputs.question}
    selected_metrics: ${select_metrics.output}
  aggregation: false
- name: construct_service_request
  type: python
  source:
    type: code
    path: construct_service_request.py
  inputs:
    answer: ${inputs.answer}
    question: ${inputs.question}
    selected_metrics: ${select_metrics.output}
  activate:
    when: ${validate_service.output.content_harm_service}
    is: true
  aggregation: false
- name: call_rai_service
  type: python
  source:
    type: code
    path: call_rai_service.py
  inputs:
    request_body: ${construct_service_request.output}
  activate:
    when: ${validate_service.output.content_harm_service}
    is: true
  aggregation: false
- name: parse_service_response
  type: python
  source:
    type: code
    path: parse_service_response.py
  inputs:
    batch_response: ${call_rai_service.output}
    selected_label_keys: ${select_metrics.output}
  activate:
    when: ${validate_service.output.content_harm_service}
    is: true
  aggregation: false
- name: format_service_output
  type: python
  source:
    type: code
    path: format_service_output.py
  inputs:
    parsed_responses: ${parse_service_response.output}
  activate:
    when: ${validate_service.output.content_harm_service}
    is: true
  aggregation: false
- name: concat_scores
  type: python
  source:
    type: code
    path: concat_results.py
  inputs:
    groundedness_results: ${parse_groundedness_response.output}
    quality_results: ${concat_quality_scores.output}
    safety_results: ${format_service_output.output}
    selected_metrics: ${select_metrics.output}
  aggregation: false
- name: validate_service
  type: python
  source:
    type: code
    path: validate_groundedness_service.py
  inputs:
    flight: ${inputs.groundedness_service_flight}
    selected_metrics: ${select_metrics.output}
    validated_input: ${validate_input.output}
  aggregation: false
- name: construct_groundedness_request
  type: python
  source:
    type: code
    path: construct_groundedness_request.py
  inputs:
    answer: ${inputs.answer}
    context: ${inputs.context}
    question: ${inputs.question}
  activate:
    when: ${validate_service.output.groundedness_service}
    is: true
  aggregation: false
- name: call_groundedness_service
  type: python
  source:
    type: code
    path: call_groundedness_service.py
  inputs:
    request_body: ${construct_groundedness_request.output}
  activate:
    when: ${validate_service.output.groundedness_service}
    is: true
  aggregation: false
- name: parse_groundedness_response
  type: python
  source:
    type: code
    path: parse_groundedness_response.py
  inputs:
    batch_response: ${call_groundedness_service.output}
    is_service_available: ${validate_service.output}
    llm_groundedness_response: ${gpt_groundedness.output}
  aggregation: false
- name: gpt_groundedness
  type: python
  source:
    type: code
    path: call_gpt_groundedness.py
  inputs:
    connection: azure_open_ai_connection
    answer: ${inputs.answer}
    context: ${inputs.context}
    deployment_name: ${inputs.deployment_name}
  activate:
    when: ${validate_service.output.groundedness_prompt}
    is: true
  aggregation: false
- name: evaluate_gpt_metrics
  type: python
  source:
    type: code
    path: evaluate_gpt_metrics.py
  inputs:
    connection: azure_open_ai_connection
    answer: ${inputs.answer}
    context: ${inputs.context}
    deployment_name: ${inputs.deployment_name}
    ground_truth: ${inputs.ground_truth}
    question: ${inputs.question}
    valid_metrics: ${validate_input.output}
  activate:
    when: ${validate_input.output.gpt_metrics}
    is: true
  aggregation: false
